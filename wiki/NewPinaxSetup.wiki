=New Pinax Setup=

There are several ways of setting up the *development environment for pinax*.

Below are some examples - one using a *boot script* (that creates a virtualenv), and one that has a few manual steps for using the handy *virtualenvwrapper*.

Both use PIP.  (Not sure if PIP runs on Windows)

== Example 1: Ubuntu and SQLite ==

The following steps will lead you through the setup pinax trunk on ubuntu 8.10 to run with the production server using SQLite:

Update the packages list:

{{{
$ sudo apt-get update
}}}

pinax is built from several packages that are hosted on svn and git so we need to install them:

{{{
$ sudo apt-get install subversion git-core
}}}

virtualenv will be used to create an isolated environment with all the required python modules including django and pinax:

{{{
$ sudo apt-get install python-virtualenv
}}}

The python PIL is required for image processing:

{{{
$ sudo apt-get install python-imaging
}}}

The boot script will create a virtualenv named pinax-env and add pinax and django to it .

Download it for example to /home/username

{{{
$ wget http://github.com/pinax/pinax/raw/master/scripts/pinax-boot.py
}}}

Run the script:

{{{
$ python pinax-boot.py pinax-env
}}}

Activating the script will change the $PATH to point to the virtualenv bin/ directory and update your prompt.

{{{
http://pypi.python.org/pypi/virtualenv#activate-script
}}}

Now when you'll call python someScript.py it will be running inside your virtualenv scope rather then the global python scope:

when you are on /home/username/development/pinax-env run:

{{{
$ source bin/activate
}}}

We will use pip to download all the packages spread across git and svn.

{{{
pip install --requirement /home/username/pinax-env/src/pinax/requirements/external_apps.txt
}}}

Pinax is shipped with several predefined projects. We'll use the basic_project as a simple example.

We'll create the SQLite database using the django manage.py script.

It'll ask you if you want to create

move to /home/username/pinax-env/src/pinax/projects/basic_project

and run:

{{{
$ python manage.py syncdb
}}}

django has a development server which make tests easy but is not suitable for production.

{{{
$ python manage.py runserver.
}}}

Now you can use a web browser and navigate to http://localhost:8000 and see the basic_project

When you want to update the code you have to update both pinax and the apps.

When you are in the src/pinax folder run:

{{{
$ svn update
}}}

to update the apps run:

{{{
pip install --requirement /home/username/pinax-env/src/pinax/requirements/external_apps.txt
}}}

== Example 2: virtualenvwrapper on Mac OSX with SQLite ==

The following steps will lead you through setting up pinax using virtualenvwrapper.

I wasn't able to use the boot-script inside a virtualenvwrapper.

Requirements:
  * SQLite (comes with OSX)
  * virtualenvwrapper
  * Python 2.4 (or higher)

Start here:

{{{
$ mkvirtualenv pinax
$ easy_install pip
$ cd .virtualenvs/pinax
$ git clone git://github.com/pinax/pinax.git
$ pip install --requirement pinax/requirements/external_apps.txt
$ easy_install django
}}}

Since pinax is one level lower than expected in the path, you need to setup a symlink so that pinax is on the path:

{{{
$ cd /.virtualenvs/pinax/lib/python2.4/site-packages
$ ln -s ~/.virtualenvs/pinax/pinax/pinax
}}}

(or maybe PIP profile can be updated to add this to the path?)

Finally, head over to one of the sample projects, say *basic_project* and run the normal Django magic.

{{{
$ cd ~/.virtualenvs/pinax/pinax/pinax/projects/basic_project
$ ./manage.py syncdb
$ ./manage.py runserver
}}}

You now have a running Django site running a pinax project.